var run_search = require('./general/run.search.js').run_search;
var run_grasp_search = require('./general/run.search.js').run_grasp_search;

// Search 
var tabu = require('./search/tabu.search.js');
var simulatedAnnealing = require('./search/simulatedAnnealing.search.js');
var GRASP = require('./search/GRASP.js')

// Objective 
var minimizeFunction = require('./objective/minimizeFunction.js').evalSolution;
var machineShop = require('./objective/machineShop.js').getWeightedTardiness;
var assignmentShop = require('./objective/assignmentShop.js').getTotalSetupTime;
var weightedGraph = require('./objective/weightedGraph.js').getSpanningTreeCost;

// Neighborhood
var neighborhood = require('./neighborhood/create.neighborhood.js');

// Ranking
var ranking = require('./ranking/create.ranking.js');

// Evaluating
var evaluate = require('./evaluate/create.evaluation.js');

// var fx_map = {
// 	"tabu" : tabu, 
// 	"simulatedAnnealing" : simulatedAnnealing,

// 	"minimizeFunction" : minimizeFunction,
// 	"machineShop" : machineShop,
// 	"assignmentShop" : assignmentShop, 

// 	"neighborhood.permutation.exchange" : neighborhood.permutation.exchange,
// 	"neighborhood.binary.flip" : neighborhood.binary.flip,

// 	"ranking.maxObjectiveValue" : ranking.maxObjectiveValue,
// 	"ranking.minObjectiveValue" : ranking.minObjectiveValue,

// 	"evaluate.greaterThan" : evaluate.greaterThan,
// 	"evaluate.lessThan" : evaluate.lessThan,
// };
// HW1
// var hw1 = run_search({
// 	general : {
// 		number_of_iterations : 20,
// 	},
// 	objective_function : {
// 		run : machineShop, 
// 		params : {
// 			inital_value : "2143",
// 		}
// 	},
// 	neighborhood : {
// 		run : neighborhood.permutation.exchange,
// 		params : {
// 			size_of_neighborhood : 4
// 		}
// 	},
// 	search_type : {
// 		run : tabu,
// 		params : {
// 			tabu_length : 3,
// 		}
// 	},
// 	ranking : {
// 		run : ranking.maxObjectiveValue
// 	},
// 	evaluate : {
// 		run : evaluate.greaterThan
// 	}
// });

// console.log(hw1)

// HW2
// var hw2 = run_search({
// 	general : {
// 		number_of_iterations : 100,
// 	},
// 	objective_function : {
// 		run : minimizeFunction, 
// 		params : {
// 			inital_value : "00011",
// 		}
// 	},
// 	neighborhood : {
// 		run : neighborhood.binary.flip,
// 		params : {
// 			size_of_neighborhood : 4
// 		}
// 	},
// 	search_type : {
// 		run : tabu,
// 		params : {
// 			tabu_length : 1,
// 		}
// 	},
// 	ranking : {
// 		run : ranking.minObjectiveValue
// 	},
// 	evaluate : {
// 		run : evaluate.lessThan
// 	}
// });

// console.log(hw2)



// // HW3
// var hw3 = run_search({
// 	general : {
// 		number_of_iterations : 100,
// 	},
// 	objective_function : {
// 		run : minimizeFunction, 
// 		params : {
// 			inital_value : "00011",
// 		}
// 	},
// 	neighborhood : {
// 		run : neighborhood.binary.flip,
// 		params : {
// 			size_of_neighborhood : 1
// 		}
// 	},
// 	search_type : {
// 		run : simulatedAnnealing,
// 		params : {
// 			 T : 500,
// 			 t_min : 100,
// 			 t_max : 500,
// 			 sigma : 0.9,
// 			 beta : 0.5,
// 			 alpha : 0.5,
// 			 cooling_schedule : "linear",
// 			 iteration : 0
// 		}
// 	},
// 	ranking : {
// 		run : ranking.minObjectiveValue
// 	},
// 	evaluate : {
// 		run : simulatedAnnealing.run
// 	}
// });

// console.log(hw3)



// // // HW4
// var hw4 = run_search({
// 	general : {
// 		number_of_iterations : 20,
// 	},
// 	objective_function : {
// 		run : assignmentShop, 
// 		params : {
// 			inital_value : "4213",
// 		}
// 	},
// 	neighborhood : {
// 		run : neighborhood.permutation.exchange,
// 		params : {
// 			size_of_neighborhood : 4
// 		}
// 	},
// 	search_type : {
// 		run : tabu,
// 		params : {
// 			tabu_length : 3,
// 		}
// 	},
// 	ranking : {
// 		run : ranking.maxObjectiveValue
// 	},
// 	evaluate : {
// 		run : evaluate.greaterThan
// 	}
// });



// // HW5
// the evaluation is simply whether  
// the objective function, in this case the
// cost of the spanning tree, 
// is less than the best so far. 

// the ranking is done on the solutions generated, 
// where the minimum objective function solution is chosen

// the neighborhood is generated by local search on a given solution
// at each iteration of the graph, meaning that as the spanning 
// tree is being constructed, the neighborhood will consist
// of potential next links

// So, essentially, the neighborhood algorithm will produce
// the Restriced Candidate List

// 

// - successive construction of a solution
// - successive improvement of it through local search

// the 

// var hw5 = run_grasp_search({
// 	general : {
// 		number_of_iterations : 20,
// 	},
// 	objective_function : {
// 		run : weightedGraph, 
// 		params : {
// 			graph : {
// 				nodes : [
// 					{
// 						id : 'r',
// 						capacity : 0,		
// 					},
// 					{
// 						id : '1',
// 						capacity : 3,		
// 					},
// 					{
// 						id : '2',
// 						capacity : 2,		
// 					},
// 					{
// 						id : '3',
// 						capacity : 4,		
// 					},
// 					{
// 						id : '4',
// 						capacity : 1,		
// 					},
// 					{
// 						id : '5',
// 						capacity : 3,		
// 					},
// 				],
// 				edges : [
// 					{
// 						source : 'r',
// 						target : '1', 
// 						weight : 1
// 					},
// 					{
// 						source : 'r',
// 						target : '2', 
// 						weight : 6
// 					},
// 					{
// 						source : 'r',
// 						target : '3', 
// 						weight : 3
// 					},
// 					{
// 						source : 'r',
// 						target : '4', 
// 						weight : 2
// 					},
// 					{
// 						source : 'r',
// 						target : '5', 
// 						weight : 4
// 					},





// 					{
// 						source : '1',
// 						target : '2', 
// 						weight : 3
// 					},
// 					{
// 						source : '1',
// 						target : '3', 
// 						weight : 3
// 					},
// 					{
// 						source : '1',
// 						target : '4', 
// 						weight : 1
// 					},
// 					{
// 						source : '1',
// 						target : '5', 
// 						weight : 2
// 					},





// 					{
// 						source : '2',
// 						target : '3', 
// 						weight : 1
// 					},
// 					{
// 						source : '2',
// 						target : '4', 
// 						weight : 2
// 					},
// 					{
// 						source : '2',
// 						target : '5', 
// 						weight : 4
// 					},




// 					{
// 						source : '3',
// 						target : '4', 
// 						weight : 1
// 					},
// 					{
// 						source : '3',
// 						target : '5', 
// 						weight : 3
// 					},




// 					{
// 						source : '4',
// 						target : '5', 
// 						weight : 3
// 					},
// 				]
// 			}
// 		}
// 	},
// 	neighborhood : {
// 		run : neighborhood.permutation.exchange,
// 		params : {
// 			size_of_neighborhood : 4
// 		}
// 	},
// 	search_type : {
// 		run : GRASP,
// 		params : {
// 			tabu_length : 3,
// 		}
// 	},
// 	ranking : {
// 		run : ranking.minObjectiveValue
// 	},
// 	evaluate : {
// 		run : evaluate.lessThan
// 	}
// });
// var hw5_practice = run_grasp_search({
// 	general : {
// 		number_of_iterations : 200,
// 	},
// 	objective_function : {
// 		run : weightedGraph, 
// 		params : {
// 			graph : {
// 				nodes : [
// 					{
// 						id : 'r',
// 						capacity : 0,		
// 					},
// 					{
// 						id : '1',
// 						capacity : 2,		
// 					},
// 					{
// 						id : '2',
// 						capacity : 3,		
// 					},
// 					{
// 						id : '3',
// 						capacity : 1,		
// 					},
// 					{
// 						id : '4',
// 						capacity : 4,		
// 					},
// 				],
// 				edges : [
// 					{
// 						source : 'r',
// 						target : '1', 
// 						weight : 1
// 					},
// 					{
// 						source : 'r',
// 						target : '2', 
// 						weight : 1
// 					},
// 					{
// 						source : 'r',
// 						target : '3', 
// 						weight : 3
// 					},
// 					{
// 						source : 'r',
// 						target : '4', 
// 						weight : 4
// 					},





// 					{
// 						source : '1',
// 						target : '2', 
// 						weight : 2
// 					},
// 					{
// 						source : '1',
// 						target : '3', 
// 						weight : 3
// 					},
// 					{
// 						source : '1',
// 						target : '4', 
// 						weight : 3
// 					},





// 					{
// 						source : '2',
// 						target : '3', 
// 						weight : 2
// 					},
// 					{
// 						source : '2',
// 						target : '4', 
// 						weight : 3
// 					},




// 					{
// 						source : '3',
// 						target : '4', 
// 						weight : 1
// 					},
// 				]
// 			}
// 		}
// 	},
// 	neighborhood : {
// 		run : neighborhood.permutation.exchange,
// 		params : {
// 			size_of_neighborhood : 4
// 		}
// 	},
// 	search_type : {
// 		run : GRASP,
// 		params : {
// 			tabu_length : 3,
// 		}
// 	},
// 	ranking : {
// 		run : ranking.minObjectiveValue
// 	},
// 	evaluate : {
// 		run : evaluate.lessThan
// 	}
// });
console.log(hw5)
console.log(hw5_practice)


// function map_configs(config) {
// 	config.objective_function.run = fx_map[config.objective_function.run];
// 	config.neighborhood.run = fx_map[config.neighborhood.run];
// 	config.search_type.run = fx_map[config.search_type.run];
// 	config.ranking.run = fx_map[config.ranking.run];
// 	config.evaluate.run = fx_map[config.evaluate.run];
// 	return config
// };

// exports.run_config = function (config) {
// 	var conf = map_configs(config);
// 	// run_search(config)
// }

// var hw4 = {
// 	general : {
// 		number_of_iterations : 2000,
// 		refreshRate : 10
// 	},
// 	objective_function : {
// 		run : "assignmentShop", 
// 		params : {
// 			inital_value : "4213",
// 		}
// 	},
// 	neighborhood : {
// 		run : "neighborhood.permutation.exchange",
// 		params : {
// 			size_of_neighborhood : 4
// 		}
// 	},
// 	search_type : {
// 		run : "tabu",
// 		params : {
// 			tabu_length : 3,
// 		}
// 	},
// 	ranking : {
// 		run : "ranking.maxObjectiveValue"
// 	},
// 	evaluate : {
// 		run : "evaluate.greaterThan"
// 	}
// };

// console.log((hw4))

// var configs = map_configs(hw4);
// console.log((configs))

// var soln = run_search(configs)
// console.log(soln)



